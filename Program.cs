using System;
using System.Collections.Generic;

namespace Lab4
{
    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å, —è–∫–∏–π –≤–∏–¥—ñ–ª—è—î –∑–∞–≥–∞–ª—å–Ω—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ –¥–ª—è "4-–µ–ª–µ–º–µ–Ω—Ç–Ω–∏—Ö" –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    public abstract class Container4
    {
        public const int DIMENSION = 4;

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É
        protected Container4()
        {
            Console.WriteLine($"[Container4] –°—Ç–≤–æ—Ä–µ–Ω–æ –µ–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø—É {GetType().Name}");
        }

        // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä (—Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä)
        ~Container4()
        {
            Console.WriteLine($"[Container4] –§—ñ–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è {GetType().Name}");
        }

        // –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏, —â–æ –º–∞—é—Ç—å —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ—Ö—ñ–¥–Ω—ñ –∫–ª–∞—Å–∏
        public abstract void SetElements();
        public abstract void Display();
        public abstract double FindMax();
    }

    // –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –æ–¥–Ω–æ–≤–∏–º—ñ—Ä–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ 4
    public class Vector4D : Container4
    {
        protected double[] _elements; // –ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–µ–∫—Ç–æ—Ä–∞

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public Vector4D() : base()
        {
            _elements = new double[Container4.DIMENSION];
            Console.WriteLine("[Vector4D] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ.");
        }

        // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
        ~Vector4D()
        {
            Console.WriteLine("[Vector4D] –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä (—Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä) –≤–∏–∫–ª–∏–∫–∞–Ω–æ.");
        }

        // –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–µ–∫—Ç–æ—Ä–∞
        public override void SetElements()
        {
            Console.WriteLine($"–í–≤–µ–¥—ñ—Ç—å {Container4.DIMENSION} –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–µ–∫—Ç–æ—Ä–∞:");
            for (int i = 0; i < Container4.DIMENSION; i++)
            {
                Console.Write($"–ï–ª–µ–º–µ–Ω—Ç [{i}]: ");
                string? input = Console.ReadLine();
                while (input is null || !double.TryParse(input, out _elements[i]))
                {
                    if (input is null)
                    {
                        Console.WriteLine("–í–≤—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (EOF). –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É.");
                        throw new OperationCanceledException("–í–≤—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.");
                    }
                    Console.Write("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ");
                    input = Console.ReadLine();
                }
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –º–∞—Å–∏–≤—É (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
        public void SetElements(double[] values)
        {
            if (values is null)
                throw new ArgumentNullException(nameof(values));
            if (values.Length != Container4.DIMENSION)
                throw new ArgumentException($"–û—á—ñ–∫—É—î—Ç—å—Å—è –º–∞—Å–∏–≤ –¥–æ–≤–∂–∏–Ω–∏ {Container4.DIMENSION}.", nameof(values));
            for (int i = 0; i < Container4.DIMENSION; i++)
            {
                _elements[i] = values[i];
            }
        }

        // –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –µ–∫—Ä–∞–Ω
        public override void Display()
        {
            Console.Write("–í–µ–∫—Ç–æ—Ä: [");
            for (int i = 0; i < Container4.DIMENSION; i++)
            {
                Console.Write($"{_elements[i]:F2}");
                if (i < Container4.DIMENSION - 1) Console.Write(", ");
            }
            Console.WriteLine("]");
        }

        // –í—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
        public override double FindMax()
        {
            double max = _elements[0];
            for (int i = 1; i < Container4.DIMENSION; i++)
            {
                if (_elements[i] > max)
                    max = _elements[i];
            }
            return max;
        }
    }

    // –ü–æ—Ö—ñ–¥–Ω–∏–π –∫–ª–∞—Å –º–∞—Ç—Ä–∏—Ü—ñ 4x4
    public class Matrix : Vector4D
    {
        private double[,] _matrix; // –î–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ñ

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public Matrix() : base()
        {
            _matrix = new double[Container4.DIMENSION, Container4.DIMENSION];
            Console.WriteLine("[Matrix] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ.");
        }

        // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
        ~Matrix()
        {
            Console.WriteLine("[Matrix] –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä (—Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä) –≤–∏–∫–ª–∏–∫–∞–Ω–æ.");
        }

        // –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Ç—Ä–∏—Ü—ñ
        public override void SetElements()
        {
            Console.WriteLine($"–í–≤–µ–¥—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ñ {Container4.DIMENSION}x{Container4.DIMENSION}:");
            for (int i = 0; i < Container4.DIMENSION; i++)
            {
                for (int j = 0; j < Container4.DIMENSION; j++)
                {
                    Console.Write($"–ï–ª–µ–º–µ–Ω—Ç [{i},{j}]: ");
                    string? input = Console.ReadLine();
                    while (input is null || !double.TryParse(input, out _matrix[i, j]))
                    {
                        if (input is null)
                        {
                            Console.WriteLine("–í–≤—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (EOF). –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É.");
                            throw new OperationCanceledException("–í–≤—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.");
                        }
                        Console.Write("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ");
                        input = Console.ReadLine();
                    }
                }
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–æ–≥–æ –º–∞—Å–∏–≤—É (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
        public void SetElements(double[,] values)
        {
            if (values is null)
                throw new ArgumentNullException(nameof(values));
            if (values.GetLength(0) != Container4.DIMENSION || values.GetLength(1) != Container4.DIMENSION)
                throw new ArgumentException($"–û—á—ñ–∫—É—î—Ç—å—Å—è –º–∞—Ç—Ä–∏—Ü—è —Ä–æ–∑–º—ñ—Ä—É {Container4.DIMENSION}x{Container4.DIMENSION}.", nameof(values));
            for (int i = 0; i < Container4.DIMENSION; i++)
            {
                for (int j = 0; j < Container4.DIMENSION; j++)
                {
                    _matrix[i, j] = values[i, j];
                }
            }
        }

        // –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –Ω–∞ –µ–∫—Ä–∞–Ω
        public override void Display()
        {
            Console.WriteLine($"–ú–∞—Ç—Ä–∏—Ü—è {Container4.DIMENSION}x{Container4.DIMENSION}:");
            for (int i = 0; i < Container4.DIMENSION; i++)
            {
                Console.Write("| ");
                for (int j = 0; j < Container4.DIMENSION; j++)
                {
                    Console.Write($"{_matrix[i, j]:F2} ");
                }
                Console.WriteLine("|");
            }
        }

        // –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ñ
        public override double FindMax()
        {
            double max = _matrix[0, 0];
            for (int i = 0; i < Container4.DIMENSION; i++)
            {
                for (int j = 0; j < Container4.DIMENSION; j++)
                {
                    if (_matrix[i, j] > max)
                        max = _matrix[i, j];
                }
            }
            return max;
        }
    }
    // –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –ø—Ä–æ–≥—Ä–∞–º–∏
    class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë  –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ 6: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –∫–ª–∞—Å–∏                      ‚ïë");
            Console.WriteLine("‚ïë  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ —Ç–∞ –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º—É             ‚ïë");
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
            try
            {
                // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
                DemonstrateDynamicPolymorphism();
                Console.WriteLine("\n" + new string('‚ïê', 65) + "\n");
                // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º –≤–∏–±–æ—Ä–æ–º —Ç–∏–ø—É
                RunDynamicMode();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–ü–æ–º–∏–ª–∫–∞: {ex.Message}");
            }
            Console.WriteLine("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É –¥–ª—è –≤–∏—Ö–æ–¥—É...");
            try
            {
                Console.ReadKey();
            }
            catch (InvalidOperationException)
            {
                // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –≤–≤–æ–¥—É
            }
        }
        // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º—É
        static void DemonstrateDynamicPolymorphism()
        {
            Console.WriteLine("üìå –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –î–ò–ù–ê–ú–Ü–ß–ù–û–ì–û –ü–û–õ–Ü–ú–û–†–§–Ü–ó–ú–£\n");
            Console.WriteLine("–°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –ø–æ–∫–∞–∂—á–∏–∫—ñ–≤ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∏–ø—É Vector4D,");
            Console.WriteLine("–∞–ª–µ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ!\n");
            // –ú–∞—Å–∏–≤ –ø–æ–∫–∞–∂—á–∏–∫—ñ–≤ –Ω–∞ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å (—Ç–∏–ø –Ω–µ–≤—ñ–¥–æ–º–∏–π –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó)
            const int DEMO_COUNT = 4;
            Vector4D[] objects = new Vector4D[DEMO_COUNT];
            // –î–∏–Ω–∞–º—ñ—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –æ–±'—î–∫—Ç—ñ–≤
            Console.WriteLine("–°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ (—Ç–∏–ø –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è):\n");
            // –û–±'—î–∫—Ç 1: Vector4D
            objects[0] = new Vector4D();
            objects[0].SetElements(new double[] { 1.5, 8.3, 3.7, 5.2 });
            Console.WriteLine("‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±'—î–∫—Ç —Ç–∏–ø—É Vector4D");
            // –û–±'—î–∫—Ç 2: Matrix
            objects[1] = new Matrix();
            ((Matrix)objects[1]).SetElements(new double[,] {
                { 2.1, 4.5, 1.8, 3.3 },
                { 7.2, 9.6, 2.4, 5.7 },
                { 1.1, 3.8, 12.5, 4.2 },
                { 6.3, 2.9, 8.1, 1.7 }
            });
            Console.WriteLine("‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±'—î–∫—Ç —Ç–∏–ø—É Matrix");
            // –û–±'—î–∫—Ç 3: Vector4D
            objects[2] = new Vector4D();
            objects[2].SetElements(new double[] { 10.5, 2.1, 15.8, 7.3 });
            Console.WriteLine("‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±'—î–∫—Ç —Ç–∏–ø—É Vector4D");
            // –û–±'—î–∫—Ç 4: Matrix
            objects[3] = new Matrix();
            ((Matrix)objects[3]).SetElements(new double[,] {
                { 5.5, 3.2, 8.8, 1.1 },
                { 9.9, 6.6, 4.4, 2.2 },
                { 11.1, 7.7, 13.3, 10.0 },
                { 3.3, 8.8, 5.5, 14.4 }
            });
            Console.WriteLine("‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±'—î–∫—Ç —Ç–∏–ø—É Matrix");
            Console.WriteLine("\n" + new string('-', 65));
            Console.WriteLine("–£–í–ê–ì–ê! –¢–∏–ø –æ–±'—î–∫—Ç–∞ –Ω–µ–≤—ñ–¥–æ–º–∏–π –Ω–∞ –µ—Ç–∞–ø—ñ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó!");
            Console.WriteLine("–í—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.");
            Console.WriteLine(new string('-', 65) + "\n");
            // –û–±—Ä–æ–±–∫–∞ –æ–±'—î–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å (–ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º!)
            for (int i = 0; i < objects.Length; i++)
            {
                Console.WriteLine($"\n‚ñ∂ –û–±'—î–∫—Ç #{i + 1} (—Ñ–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–ø: {objects[i].GetType().Name}):");
                Console.WriteLine(new string('-', 65));
                // –í–∏–∫–ª–∏–∫ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É Display() - —Ç–∏–ø –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ!
                objects[i].Display();
                // –í–∏–∫–ª–∏–∫ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É FindMax() - —Ç–∏–ø –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ!
                double max = objects[i].FindMax();
                Console.WriteLine($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç: {max}");
                Console.WriteLine($"‚Üí –í–∏–∫–ª–∏–∫–∞–Ω–æ –º–µ—Ç–æ–¥ –∑ –∫–ª–∞—Å—É: {objects[i].GetType().Name}");
            }
            Console.WriteLine("\n" + new string('‚ïê', 65));
            Console.WriteLine(" –í–ò–°–ù–û–í–û–ö: –í—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É");
            Console.WriteLine("   –≤–µ—Ä—Å—ñ—é –º–µ—Ç–æ–¥—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ —Ç–∏–ø—É –æ–±'—î–∫—Ç–∞,");
            Console.WriteLine("   –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ —á–µ—Ä–µ–∑ –ø–æ–∫–∞–∂—á–∏–∫ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É!");
            Console.WriteLine(new string('‚ïê', 65));
        }
        // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º –≤–∏–±–æ—Ä–æ–º —Ç–∏–ø—É –æ–±'—î–∫—Ç–∞
        static void RunDynamicMode()
        {
            Console.WriteLine(" –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –†–ï–ñ–ò–ú –ó –î–ò–ù–ê–ú–Ü–ß–ù–ò–ú –í–ò–ë–û–†–û–ú –¢–ò–ü–£\n");
            List<Vector4D> dynamicObjects = new List<Vector4D>();
            bool continueAdding = true;
            while (continueAdding)
            {
                Console.WriteLine("\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±'—î–∫—Ç–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:");
                Console.WriteLine("1 - –í–µ–∫—Ç–æ—Ä 4D");
                Console.WriteLine("2 - –ú–∞—Ç—Ä–∏—Ü—è 4x4");
                Console.WriteLine("0 - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è");
                Console.Write("–í–∞—à –≤–∏–±—ñ—Ä: ");
                string? choice = Console.ReadLine();
                // –î–∏–Ω–∞–º—ñ—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                Vector4D? newObject = null;
                switch (choice)
                {
                    case "1":
 Console.WriteLine("\n‚Üí –î–∏–Ω–∞–º—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Ç–∏–ø—É Vector4D...");
 newObject = CreateVector();
 Console.WriteLine("‚úì –û–±'—î–∫—Ç Vector4D —Å—Ç–≤–æ—Ä–µ–Ω–æ!");
                        break;
                    case "2":
Console.WriteLine("\n‚Üí –î–∏–Ω–∞–º—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Ç–∏–ø—É Matrix...");
                        newObject = CreateMatrix();
  Console.WriteLine("‚úì –û–±'—î–∫—Ç Matrix —Å—Ç–≤–æ—Ä–µ–Ω–æ!");
                        break;
                    case "0":
                        continueAdding = false;
                        break;
                    default:
                        Console.WriteLine("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä!");
                        continue;
                }
                if (newObject != null)
                {
                    dynamicObjects.Add(newObject);
  Console.WriteLine($"–û–±'—î–∫—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó (–≤—Å—å–æ–≥–æ –æ–±'—î–∫—Ç—ñ–≤: {dynamicObjects.Count})");
                }
            }
            if (dynamicObjects.Count > 0)
            {
  Console.WriteLine("\n" + new string('‚ïê', 65));
 Console.WriteLine($"–û–ë–†–û–ë–ö–ê {dynamicObjects.Count} –î–ò–ù–ê–ú–Ü–ß–ù–û –°–¢–í–û–†–ï–ù–ò–• –û–ë'–Ñ–ö–¢–Ü–í:");
                Console.WriteLine(new string('‚ïê', 65));
                double globalMax = double.MinValue;
                string maxObjectType = "";
                int maxObjectIndex = -1;
                // –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å (–ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º!)
                for (int i = 0; i < dynamicObjects.Count; i++)
                {
 Console.WriteLine($"\n‚ñ∂ –û–±'—î–∫—Ç #{i + 1} (—Ç–∏–ø: {dynamicObjects[i].GetType().Name}):");
                    Console.WriteLine(new string('-', 65));
                    // –í–∏–∫–ª–∏–∫ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
                    dynamicObjects[i].Display();
                    double max = dynamicObjects[i].FindMax();
                    Console.WriteLine($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç: {max}");
                    if (max > globalMax)
                    {
                        globalMax = max;
          maxObjectType = dynamicObjects[i].GetType().Name;
                        maxObjectIndex = i + 1;
                    }
                }
                Console.WriteLine("\n" + new string('‚ïê', 65));
                Console.WriteLine("–ì–õ–û–ë–ê–õ–¨–ù–ò–ô –ü–Ü–î–°–£–ú–û–ö:");
  Console.WriteLine($"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤: {globalMax}");
 Console.WriteLine($"–ó–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±'—î–∫—Ç—ñ #{maxObjectIndex} (—Ç–∏–ø: {maxObjectType})");
                Console.WriteLine(new string('‚ïê', 65));
            }
            else
            {
   Console.WriteLine("\n –ñ–æ–¥–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.");
            }
        }
        // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞
        static Vector4D CreateVector()
        {
            Vector4D vector = new Vector4D();
            Console.WriteLine("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è:");
            Console.WriteLine("1 - –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É");
            Console.WriteLine("2 - –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è");
            Console.Write("–í–∞—à –≤–∏–±—ñ—Ä: ");
            string? choice = Console.ReadLine();
            if (choice == "1")
            {
                vector.SetElements();
            }
            else
            {
                Random rand = new Random();
                double[] values = new double[Vector4D.DIMENSION];
                for (int i = 0; i < Vector4D.DIMENSION; i++)
                {
                    values[i] = Math.Round(rand.NextDouble() * 20, 2);
                }
                vector.SetElements(values);
                Console.WriteLine("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.");
            }


            return vector;
        }
        // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ
        static Matrix CreateMatrix()
        {
            Matrix matrix = new Matrix();
            Console.WriteLine("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è:");
            Console.WriteLine("1 - –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É");
            Console.WriteLine("2 - –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è");
            Console.Write("–í–∞—à –≤–∏–±—ñ—Ä: ");
            string? choice = Console.ReadLine();
            if (choice == "1")
            {
                matrix.SetElements();
            }
            else
            {
                Random rand = new Random();
   double[,] values = new double[Vector4D.DIMENSION, Vector4D.DIMENSION];
                for (int i = 0; i < Vector4D.DIMENSION; i++)
                {
                    for (int j = 0; j < Vector4D.DIMENSION; j++)
                    {
           values[i, j] = Math.Round(rand.NextDouble() * 20, 2);
                    }
                }
                matrix.SetElements(values);
                Console.WriteLine("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.");
            }
            return matrix;
        }
    }
}
